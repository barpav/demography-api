openapi: 3.0.3
info:
  title: Demography
  description:
    Test demography analytics REST API specification and fully-functional client. OpenAPI 3.0 YAML source can be found [here](https://github.com/barpav/demography-api/blob/main/demography-api.yaml).
  version: 0.8.0
servers:
  - url: http://localhost:{port}/v1
    variables:
      port:
        default: '8080'
tags:
  - name: people
    description: Person data management and analytics
    externalDocs:
      description: Source code
      url: https://github.com/barpav/demography
paths:
  /people:
    post:
        tags:
          - people
        summary: Add new person
        requestBody:
          description: New person data.
          content:
            application/vnd.newPersonData.v1+json:
              schema:
                $ref: '#/components/schemas/newPersonData.v1'
          required: true
        responses:
          '201':
            description: New person data has been added successfully.
            content:
              application/vnd.enrichedPersonData.v1+json:
                schema:
                  $ref: '#/components/schemas/enrichedPersonData.v1'
          '400':
            description: Incorrect new person data.
            content:
              text/plain; charset=utf-8:
                example: Person's name must be specified.
          '415':
            description: Unsupported new person data (media type).
    get:
      tags:
        - people
      summary: Search by person data
      parameters:
        - name: surname
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: patronymic
          in: query
          schema:
            type: string
        - name: age
          in: query
          schema:
            type: integer
        - name: gender
          in: query
          schema:
            type: string
        - name: country
          in: query
          schema:
            type: string
        - name: after
          in: query
          description: Person id.
          schema:
            type: integer
        - name: limit
          in: query
          description: Maximum number of people to return (min 1, max 100, default 30).
          schema:
            type: integer
      responses:
          '200':
            description: Success.
            content:
              application/vnd.searchResult.v1+json:
                schema:
                  $ref: '#/components/schemas/searchResult.v1'
          '400':
            description: Incorrect parameters.
            content:
              text/plain; charset=utf-8:
                example: "Invalid parameter 'limit': min 1, max 100."
          '406':
            description: Requested media type is not supported ("Accept" header).

  /people/{id}:
    get:
      tags:
        - people
      summary: Get person data
      parameters:
        - name: id
          in: path
          description: Person id to receive.
          required: true
          schema:
            type: integer
      responses:
          '200':
            description: Success.
            content:
              application/vnd.enrichedPersonData.v1+json:
                schema:
                  $ref: '#/components/schemas/enrichedPersonData.v1'
          '404':
            description: Person not found.
          '406':
            description: Requested media type is not supported ("Accept" header).
    put:
        tags:
          - people
        summary: Edit person data
        parameters:
        - name: id
          in: path
          description: Person data id to edit.
          required: true
          schema:
            type: integer
        requestBody:
          description: New person data.
          content:
            application/vnd.editedPersonData.v1+json:
              schema:
                $ref: '#/components/schemas/editedPersonData.v1'
          required: true
        responses:
          '200':
            description: Person data has been edited successfully.
          '400':
            description: Incorrect person data.
            content:
              text/plain; charset=utf-8:
                example: Person's name must be specified.
          '404':
            description: Person not found.
          '415':
            description: Unsupported person data (media type).
    delete:
        tags:
          - people
        summary: Delete person data
        parameters:
        - name: id
          in: path
          description: Person data id to delete.
          required: true
          schema:
            type: integer
        responses:
          '204':
            description: Person data has been deleted successfully.
          '404':
            description: Person not found.

components:
  schemas:
    newPersonData.v1:
      type: object
      required:
        - surname
        - name
      properties:
        surname:
          type: string
          example: Ushakov
          minLength: 1
          maxLength: 150
        name:
          type: string
          example: Dmitriy
          minLength: 1
          maxLength: 150
        patronymic:
          type: string
          example: Vasilevich
          maxLength: 150
    enrichedPersonData.v1:
      type: object
      required:
        - id
        - surname
        - name
      properties:
        id:
          type: integer
          example: 2719
        surname:
          type: string
          example: Ushakov
          minLength: 1
          maxLength: 150
        name:
          type: string
          example: Dmitriy
          minLength: 1
          maxLength: 150
        patronymic:
          type: string
          example: Vasilevich
          maxLength: 150
        age:
          type: integer
          example: 43
        gender:
          type: string
          enum: [male, female]
        country:
          type: string
          example: RU
    searchResult.v1:
      type: object
      required:
        - total
      properties:
        total:
          type: integer
          example: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/enrichedPersonData.v1'
    editedPersonData.v1:
      type: object
      required:
        - surname
        - name
      properties:
        surname:
          type: string
          example: Dmitriev
          minLength: 1
          maxLength: 150
        name:
          type: string
          example: Dmitriy
          minLength: 1
          maxLength: 150
        patronymic:
          type: string
          example: Vasilevich
          maxLength: 150
        age:
          type: integer
          example: 50
        gender:
          type: string
          enum: [male, female]
        country:
          type: string
          example: RU